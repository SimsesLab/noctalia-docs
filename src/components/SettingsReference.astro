---
import { Code } from '@astrojs/starlight/components';

const URL = 'https://raw.githubusercontent.com/noctalia-dev/noctalia-shell/main/Assets/settings-default.json';

let settingsJson = {};
let errorMessage = '';

try {
	const response = await fetch(URL);
	if (response.ok) {
		settingsJson = await response.json();
	} else {
		errorMessage = `Failed to fetch settings: ${response.status} ${response.statusText}`;
	}
} catch (error) {
	errorMessage = `Error fetching settings: ${error.message}`;
}

// Convert JSON to Nix attribute set format
function jsonToNix(obj, indent = 0): string {
	const spaces = '  '.repeat(indent);

	if (obj === null) return 'null';
	if (typeof obj === 'boolean') return obj.toString();
	if (typeof obj === 'number') return obj.toString();
	if (typeof obj === 'string') return `"${obj.replace(/"/g, '\\"')}"`;

	if (Array.isArray(obj)) {
		if (obj.length === 0) return '[ ]';
		const items = obj.map(item => `${spaces}  ${jsonToNix(item, indent + 1)}`).join('\n');
		return `[\n${items}\n${spaces}]`;
	}

	if (typeof obj === 'object') {
		const entries = Object.entries(obj);
		if (entries.length === 0) return '{ }';

		const attrs = entries.map(([key, value]) => {
			const nixKey = /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(key) ? key : `"${key}"`;
			return `${spaces}  ${nixKey} = ${jsonToNix(value, indent + 1)};`;
		}).join('\n');

		return `{\n${attrs}\n${spaces}}`;
	}

	return 'null';
}

// Create a complete home-manager configuration example
const settingsNix = errorMessage ? `# ${errorMessage}` : jsonToNix(settingsJson, 3);
const nixConfigRaw = errorMessage ? `# ${errorMessage}` : `
{ pkgs, inputs, ... }:
{
  home-manager.users.drfoobar = {
    imports = [
      inputs.noctalia.homeModules.default
    ];

    programs.noctalia-shell = {
      enable = true;
      settings = ${settingsNix};
    };
  };
}`;
---

<Code code={nixConfigRaw} lang="nix" title="noctalia.nix" />
